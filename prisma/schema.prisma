datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum FeatureName {
  templates
  courses
  job_board
  resume
  slack_community_access
  personalized_account_portal
  coaching
  vip_slack_access
  unlimited_resume_reviews
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  phone         String?
  role          Role      @default(user)
  password      String
  accounts      Account[]
  sessions      Session[]
  isActive      Boolean   @default(false)

  conf_grant_id String?
  calendarLink  String?
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  coaching      Coaching[]

  stripeCustomerId String?

  // Add relation to track subscriptions
  userSubscriptions  UserSubscription[]
  purchasedTemplates UserPurchasedTemplate[]
  jobActivities      UserJobActivity[] // Jobs the user applied for or interacted with
  courses            UserPurchasedCourse[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ResetReq {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  email         String
  otp           Int
  isOtpVerified Boolean  @default(false)
  expiresAt     DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Setting {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  adminId       String   @unique @db.ObjectId
  siteName      String?
  supportEmail  String?  @unique
  description   String?
  keywords      String[]
  isMaintenance Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  admin
  user
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model Templates {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subscription {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  title           String           @unique
  features        String[]
  price           Int
  type            SubscriptionType @default(monthly)
  paymentLink     String
  stripeProductId String
  stripePriceId   String

  isActive Boolean @default(true)

  // Add relation to track user subscriptions
  userSubscriptions UserSubscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum SubscriptionType {
  monthly
  yearly
}

// New model to track user subscriptions and feature usage
model UserSubscription {
  id              String             @id @default(auto()) @map("_id") @db.ObjectId
  userId          String             @db.ObjectId
  subscriptionId  String             @db.ObjectId
  stripeSessionId String? // Store Stripe session ID for reference
  status          SubscriptionStatus @default(active)
  startDate       DateTime           @default(now())
  endDate         DateTime? // For tracking subscription expiration
  features        Feature[] // Relation to Feature model
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription    Subscription       @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Feature {
  id                 String           @id @default(auto()) @map("_id") @db.ObjectId
  userSubscriptionId String           @db.ObjectId
  name               FeatureName // Use enum for feature names
  total              Int? // Total allowed (e.g., 10 templates), null for boolean features
  remaining          Int? // Remaining usage, null for boolean features
  value              Int? // Value per unit (e.g., 5000), null for boolean features
  enabled            Boolean? // True for features like job_board, null for numeric features
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  userSubscription   UserSubscription @relation(fields: [userSubscriptionId], references: [id], onDelete: Cascade)

  @@index([userSubscriptionId, name])
}

enum SubscriptionStatus {
  active
  canceled
  expired
}

enum TemplateType {
  free
  pro
}

model Template {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  category    TemplateType @default(free)
  banner      String?
  price       Int?
  file        String
  plan        String       @db.ObjectId
  published   Boolean      @default(false)
  download    Int          @default(0)

  purchases UserPurchasedTemplate[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserPurchasedTemplate {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
  template    Template @relation(fields: [templateId], references: [id])
  templateId  String   @db.ObjectId
  isPaid      Boolean  @default(false)
  purchasedAt DateTime @default(now())
}

enum JobType {
  remote
  part_time
  full_time
  contractual
}

enum ExperiencesType {
  entry_level
  mid_level
  senior_level
}

model Job {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  company      String
  type         JobType  @default(full_time)
  location     String
  salary       Int
  description  String
  url          String
  expiration   DateTime
  published    Boolean  @default(false)
  applications String[] @db.ObjectId

  skills    String[]
  experienc ExperiencesType @default(entry_level)
  education String

  userActivities UserJobActivity[] // Users who interacted with this job

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserJobActivity {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  job       Job      @relation(fields: [jobId], references: [id])
  jobId     String   @db.ObjectId
  appliedAt DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum CourseType {
  Beginner
  Intermediate
  Advanced
}

model Course {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  instructor  String
  description String
  category    TemplateType @default(free)
  type        CourseType   @default(Beginner)
  file        String
  price       Int?
  plan        String       @db.ObjectId
  published   Boolean      @default(false)
  enrolled    Int          @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  purchases UserPurchasedCourse[]

  @@map("courses")
}

model UserPurchasedCourse {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  courseId    String   @db.ObjectId
  purchasedAt DateTime @default(now())
  isPaid      Boolean  @default(false)

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  @@map("user_purchased_courses")
}

model Testmonial {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  fullName String
  jobTitle String
  message  String
  rating   Int

  active Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum CoachingStatus {
  opened
  scheduled
  completed
  camceled
}

model Coaching {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName  String
  email     String
  phone     String
  date      DateTime
  time      String
  focusArea String[]
  isPaid    Boolean  @default(false)
  amount    Int
  notes     String

  status CoachingStatus @default(opened)

  // meeting link
  join_url  String?
  start_url String?
  pass_code String?

  // Relation to User
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JobAlert {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
